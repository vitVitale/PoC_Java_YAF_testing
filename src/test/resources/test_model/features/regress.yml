---
epic: Pilot ST Coverage
feature: Regress I

setup:
  context:
    required: ['localDB']
  once:
    before:
      - command: Выполнить запрос на изменение в БД-localDB
        allure_step: Подготовим БД
        params:
          text: |-
            SET search_path TO my_schema;
            {{ GET_FILE prepareDB.sql }}
          expected: 'NO CHANGES ALLOWED'
  only:
    - tags: ['DB_required']
      before:
        - command: Выполнить запрос на изменение в БД-localDB
          params:
            text: |-
              SET search_path TO my_schema;
            expected: 'NO CHANGES ALLOWED'
    - tags: ['unavailable_DB']
      before:
        - command: Выполнить Bash скрипт
          params:
            text: |-
              docker stop {{ stopable }}
              sleep 2
              docker ps --all --format 'CONTAINER [{{.Names}}]  >>  STATUS [{{.Status}}]'
            expected: 'NO SAVE'
      after:
        - command: Выполнить Bash скрипт
          params:
            text: |-
              {{ GET_FILE runStoppedContainers.sh }}
            expected: 'NO SAVE'

########################################################################################################################

tests:
  - name: Тест с источником аргументов из файла
    tags: ['DB_required', 'useless']
    # userId;query;pronounceText;intent;scenario
    test_data_from_csv:
      file: test_data_from_file.csv
      delimiter: ;
      from: 38
      to: 45
    steps:
      - command: Выполнить запрос на изменение в БД-localDB
        allure_step: Запишем параметры в БД
        params:
          text: |-
            INSERT INTO salute_assistant(user_id, query_phrase, pronounce_text, scenario, intent)
            VALUES ('{{ userId }}', '{{ query }}', '{{ pronounceText }}', '{{ scenario }}', '{{ intent }}');
          expected: 'ONLY WITH CHANGES'


  - name: Проверка ендпоинта /new - (создание клиента)
    tags: ['DB_required', 'covering_test']
    test_data:
      - { status: '201', answer: 'Создан клиент: стр. № \d+' }
    steps:
      - command: Отправить запрос REST-SomeControllerAPI
        params:
          text: |-
            curl -X POST '{{ BASE_PATH SomeControllerAPI }}/some/new' \
            -H 'Content-Type: application/json' \
            -H 'accept: */*' \
            -d '{"clientName":"Vitale","hobbies":"eat","mainGreeting":"Hi =)"}'
          expected: 'HTTP CODE: {{ status }}'
      - command: Проверяем значение поля ответа
        params:
          text: |-
            STRUCT : RS_1
          expected: 'REGEX {{ answer }}'


  - name: Проверка ендпоинта /new - (уникальность clientName)
    tags: ['covering_test']
    test_data:
      - { status: '400', answer: 'Запись с таким clientName уже существует !' }
    steps:
      - command: Отправить запрос REST-SomeControllerAPI
        params:
          text: |-
            curl -X POST '{{ BASE_PATH SomeControllerAPI }}/some/new' \
            -H 'Content-Type: application/json' \
            -H 'accept: */*' \
            -d '{"clientName":"Dima","hobbies":"games","mainGreeting":"Hola !"}'
          expected: 'HTTP CODE: 201'
      - command: Отправить запрос REST-SomeControllerAPI
        params:
          text: |-
            curl -X POST '{{ BASE_PATH SomeControllerAPI }}/some/new' \
            -H 'Content-Type: application/json' \
            -H 'accept: */*' \
            -d '{"clientName":"Dima","hobbies":"music","mainGreeting":"Hello =|"}'
          expected: 'HTTP CODE: {{ status }}'
      - command: Проверяем значение поля ответа
        params:
          text: |-
            STRUCT : RS_2
          expected: '{{ answer }}'


  - name: Проверка ендпоинта /new - (пропущено clientName)
    tags: ['covering_test']
    test_data:
      - { status: '400', answer: 'clientName не передан либо равен null !' }
    steps:
      - command: Отправить запрос REST-SomeControllerAPI
        params:
          text: |-
            curl -X POST '{{ BASE_PATH SomeControllerAPI }}/some/new' \
            -H 'Content-Type: application/json' \
            -H 'accept: */*' \
            -d '{"hobbies":"guitar","mainGreeting":"Bonjour !"}'
          expected: 'HTTP CODE: {{ status }}'
      - command: Проверяем значение поля ответа
        params:
          text: |-
            STRUCT : RS_1
          expected: '{{ answer }}'


  - name: Проверка ендпоинта /new - (недоступность БД)
    tags: ['unavailable_DB', 'covering_test']
    test_data:
      - { stopable: 'postgres', status: '503', answer: 'Проблема с доступностью БД !' }
    steps:
      - command: Отправить запрос REST-SomeControllerAPI
        params:
          text: |-
            curl -X POST '{{ BASE_PATH SomeControllerAPI }}/some/new' \
            -H 'Content-Type: application/json' \
            -H 'accept: */*' \
            -d '{"clientName":"Alex","hobbies":"guitar","mainGreeting":"Bonjour !"}'
          expected: 'HTTP CODE: {{ status }}'
      - command: Проверяем значение поля ответа
        params:
          text: |-
            STRUCT : RS_1
          expected: '{{ answer }}'


  - name: Проверка ендпоинта /new - (удалена таблица в БД)
    tags: ['DB_required', 'covering_test']
    test_data:
      - { status: '500', answer: 'Неизвестная ошибка сервера !' }
    steps:
      - command: Выполнить запрос на изменение в БД-localDB
        params:
          text: 'DROP TABLE client CASCADE'
          expected: 'NO CHANGES ALLOWED'
      - command: Отправить запрос REST-SomeControllerAPI
        params:
          text: |-
            curl -X POST '{{ BASE_PATH SomeControllerAPI }}/some/new' \
            -H 'Content-Type: application/json' \
            -H 'accept: */*' \
            -d '{"clientName":"Tom","hobbies":"tennis","mainGreeting":"Salute !"}'
          expected: 'HTTP CODE: {{ status }}'
      - command: Проверяем значение поля ответа
        params:
          text: |-
            STRUCT : RS_1
          expected: '{{ answer }}'

